$date
	Thu Feb 10 04:57:34 2022
$end
$version
	ModelSim Version 6.2g
$end
$timescale
	1ns
$end
$scope module rv32i_tb $end
$var wire 1 ! opcode_fetch [6] $end
$var wire 1 " opcode_fetch [5] $end
$var wire 1 # opcode_fetch [4] $end
$var wire 1 $ opcode_fetch [3] $end
$var wire 1 % opcode_fetch [2] $end
$var wire 1 & opcode_fetch [1] $end
$var wire 1 ' opcode_fetch [0] $end
$var wire 1 ( opcode_decode [6] $end
$var wire 1 ) opcode_decode [5] $end
$var wire 1 * opcode_decode [4] $end
$var wire 1 + opcode_decode [3] $end
$var wire 1 , opcode_decode [2] $end
$var wire 1 - opcode_decode [1] $end
$var wire 1 . opcode_decode [0] $end
$var wire 1 / opcode_execute [6] $end
$var wire 1 0 opcode_execute [5] $end
$var wire 1 1 opcode_execute [4] $end
$var wire 1 2 opcode_execute [3] $end
$var wire 1 3 opcode_execute [2] $end
$var wire 1 4 opcode_execute [1] $end
$var wire 1 5 opcode_execute [0] $end
$var wire 1 6 funct3_fetch [2] $end
$var wire 1 7 funct3_fetch [1] $end
$var wire 1 8 funct3_fetch [0] $end
$var wire 1 9 funct3_decode [2] $end
$var wire 1 : funct3_decode [1] $end
$var wire 1 ; funct3_decode [0] $end
$var wire 1 < funct3_execute [2] $end
$var wire 1 = funct3_execute [1] $end
$var wire 1 > funct3_execute [0] $end
$var wire 1 ? rs1_fetch [4] $end
$var wire 1 @ rs1_fetch [3] $end
$var wire 1 A rs1_fetch [2] $end
$var wire 1 B rs1_fetch [1] $end
$var wire 1 C rs1_fetch [0] $end
$var wire 1 D rs2_fetch [4] $end
$var wire 1 E rs2_fetch [3] $end
$var wire 1 F rs2_fetch [2] $end
$var wire 1 G rs2_fetch [1] $end
$var wire 1 H rs2_fetch [0] $end
$var wire 1 I rd_fetch [4] $end
$var wire 1 J rd_fetch [3] $end
$var wire 1 K rd_fetch [2] $end
$var wire 1 L rd_fetch [1] $end
$var wire 1 M rd_fetch [0] $end
$var wire 1 N rs1_decode [4] $end
$var wire 1 O rs1_decode [3] $end
$var wire 1 P rs1_decode [2] $end
$var wire 1 Q rs1_decode [1] $end
$var wire 1 R rs1_decode [0] $end
$var wire 1 S rs2_decode [4] $end
$var wire 1 T rs2_decode [3] $end
$var wire 1 U rs2_decode [2] $end
$var wire 1 V rs2_decode [1] $end
$var wire 1 W rs2_decode [0] $end
$var wire 1 X rd_decode [4] $end
$var wire 1 Y rd_decode [3] $end
$var wire 1 Z rd_decode [2] $end
$var wire 1 [ rd_decode [1] $end
$var wire 1 \ rd_decode [0] $end
$var wire 1 ] rs1_execute [4] $end
$var wire 1 ^ rs1_execute [3] $end
$var wire 1 _ rs1_execute [2] $end
$var wire 1 ` rs1_execute [1] $end
$var wire 1 a rs1_execute [0] $end
$var wire 1 b rs2_execute [4] $end
$var wire 1 c rs2_execute [3] $end
$var wire 1 d rs2_execute [2] $end
$var wire 1 e rs2_execute [1] $end
$var wire 1 f rs2_execute [0] $end
$var wire 1 g rd_execute [4] $end
$var wire 1 h rd_execute [3] $end
$var wire 1 i rd_execute [2] $end
$var wire 1 j rd_execute [1] $end
$var wire 1 k rd_execute [0] $end
$var wire 1 l clock $end
$var wire 1 m reset $end
$var wire 1 n write_data_mem [31] $end
$var wire 1 o write_data_mem [30] $end
$var wire 1 p write_data_mem [29] $end
$var wire 1 q write_data_mem [28] $end
$var wire 1 r write_data_mem [27] $end
$var wire 1 s write_data_mem [26] $end
$var wire 1 t write_data_mem [25] $end
$var wire 1 u write_data_mem [24] $end
$var wire 1 v write_data_mem [23] $end
$var wire 1 w write_data_mem [22] $end
$var wire 1 x write_data_mem [21] $end
$var wire 1 y write_data_mem [20] $end
$var wire 1 z write_data_mem [19] $end
$var wire 1 { write_data_mem [18] $end
$var wire 1 | write_data_mem [17] $end
$var wire 1 } write_data_mem [16] $end
$var wire 1 ~ write_data_mem [15] $end
$var wire 1 !! write_data_mem [14] $end
$var wire 1 "! write_data_mem [13] $end
$var wire 1 #! write_data_mem [12] $end
$var wire 1 $! write_data_mem [11] $end
$var wire 1 %! write_data_mem [10] $end
$var wire 1 &! write_data_mem [9] $end
$var wire 1 '! write_data_mem [8] $end
$var wire 1 (! write_data_mem [7] $end
$var wire 1 )! write_data_mem [6] $end
$var wire 1 *! write_data_mem [5] $end
$var wire 1 +! write_data_mem [4] $end
$var wire 1 ,! write_data_mem [3] $end
$var wire 1 -! write_data_mem [2] $end
$var wire 1 .! write_data_mem [1] $end
$var wire 1 /! write_data_mem [0] $end
$var wire 1 0! data_mem_adr [31] $end
$var wire 1 1! data_mem_adr [30] $end
$var wire 1 2! data_mem_adr [29] $end
$var wire 1 3! data_mem_adr [28] $end
$var wire 1 4! data_mem_adr [27] $end
$var wire 1 5! data_mem_adr [26] $end
$var wire 1 6! data_mem_adr [25] $end
$var wire 1 7! data_mem_adr [24] $end
$var wire 1 8! data_mem_adr [23] $end
$var wire 1 9! data_mem_adr [22] $end
$var wire 1 :! data_mem_adr [21] $end
$var wire 1 ;! data_mem_adr [20] $end
$var wire 1 <! data_mem_adr [19] $end
$var wire 1 =! data_mem_adr [18] $end
$var wire 1 >! data_mem_adr [17] $end
$var wire 1 ?! data_mem_adr [16] $end
$var wire 1 @! data_mem_adr [15] $end
$var wire 1 A! data_mem_adr [14] $end
$var wire 1 B! data_mem_adr [13] $end
$var wire 1 C! data_mem_adr [12] $end
$var wire 1 D! data_mem_adr [11] $end
$var wire 1 E! data_mem_adr [10] $end
$var wire 1 F! data_mem_adr [9] $end
$var wire 1 G! data_mem_adr [8] $end
$var wire 1 H! data_mem_adr [7] $end
$var wire 1 I! data_mem_adr [6] $end
$var wire 1 J! data_mem_adr [5] $end
$var wire 1 K! data_mem_adr [4] $end
$var wire 1 L! data_mem_adr [3] $end
$var wire 1 M! data_mem_adr [2] $end
$var wire 1 N! data_mem_adr [1] $end
$var wire 1 O! data_mem_adr [0] $end
$var wire 1 P! memwrite $end
$var wire 1 Q! read_data_mem [31] $end
$var wire 1 R! read_data_mem [30] $end
$var wire 1 S! read_data_mem [29] $end
$var wire 1 T! read_data_mem [28] $end
$var wire 1 U! read_data_mem [27] $end
$var wire 1 V! read_data_mem [26] $end
$var wire 1 W! read_data_mem [25] $end
$var wire 1 X! read_data_mem [24] $end
$var wire 1 Y! read_data_mem [23] $end
$var wire 1 Z! read_data_mem [22] $end
$var wire 1 [! read_data_mem [21] $end
$var wire 1 \! read_data_mem [20] $end
$var wire 1 ]! read_data_mem [19] $end
$var wire 1 ^! read_data_mem [18] $end
$var wire 1 _! read_data_mem [17] $end
$var wire 1 `! read_data_mem [16] $end
$var wire 1 a! read_data_mem [15] $end
$var wire 1 b! read_data_mem [14] $end
$var wire 1 c! read_data_mem [13] $end
$var wire 1 d! read_data_mem [12] $end
$var wire 1 e! read_data_mem [11] $end
$var wire 1 f! read_data_mem [10] $end
$var wire 1 g! read_data_mem [9] $end
$var wire 1 h! read_data_mem [8] $end
$var wire 1 i! read_data_mem [7] $end
$var wire 1 j! read_data_mem [6] $end
$var wire 1 k! read_data_mem [5] $end
$var wire 1 l! read_data_mem [4] $end
$var wire 1 m! read_data_mem [3] $end
$var wire 1 n! read_data_mem [2] $end
$var wire 1 o! read_data_mem [1] $end
$var wire 1 p! read_data_mem [0] $end
$var wire 1 q! instruction_mem_adr [31] $end
$var wire 1 r! instruction_mem_adr [30] $end
$var wire 1 s! instruction_mem_adr [29] $end
$var wire 1 t! instruction_mem_adr [28] $end
$var wire 1 u! instruction_mem_adr [27] $end
$var wire 1 v! instruction_mem_adr [26] $end
$var wire 1 w! instruction_mem_adr [25] $end
$var wire 1 x! instruction_mem_adr [24] $end
$var wire 1 y! instruction_mem_adr [23] $end
$var wire 1 z! instruction_mem_adr [22] $end
$var wire 1 {! instruction_mem_adr [21] $end
$var wire 1 |! instruction_mem_adr [20] $end
$var wire 1 }! instruction_mem_adr [19] $end
$var wire 1 ~! instruction_mem_adr [18] $end
$var wire 1 !" instruction_mem_adr [17] $end
$var wire 1 "" instruction_mem_adr [16] $end
$var wire 1 #" instruction_mem_adr [15] $end
$var wire 1 $" instruction_mem_adr [14] $end
$var wire 1 %" instruction_mem_adr [13] $end
$var wire 1 &" instruction_mem_adr [12] $end
$var wire 1 '" instruction_mem_adr [11] $end
$var wire 1 (" instruction_mem_adr [10] $end
$var wire 1 )" instruction_mem_adr [9] $end
$var wire 1 *" instruction_mem_adr [8] $end
$var wire 1 +" instruction_mem_adr [7] $end
$var wire 1 ," instruction_mem_adr [6] $end
$var wire 1 -" instruction_mem_adr [5] $end
$var wire 1 ." instruction_mem_adr [4] $end
$var wire 1 /" instruction_mem_adr [3] $end
$var wire 1 0" instruction_mem_adr [2] $end
$var wire 1 1" instruction_mem_adr [1] $end
$var wire 1 2" instruction_mem_adr [0] $end
$var wire 1 3" instruction_fetch [31] $end
$var wire 1 4" instruction_fetch [30] $end
$var wire 1 5" instruction_fetch [29] $end
$var wire 1 6" instruction_fetch [28] $end
$var wire 1 7" instruction_fetch [27] $end
$var wire 1 8" instruction_fetch [26] $end
$var wire 1 9" instruction_fetch [25] $end
$var wire 1 :" instruction_fetch [24] $end
$var wire 1 ;" instruction_fetch [23] $end
$var wire 1 <" instruction_fetch [22] $end
$var wire 1 =" instruction_fetch [21] $end
$var wire 1 >" instruction_fetch [20] $end
$var wire 1 ?" instruction_fetch [19] $end
$var wire 1 @" instruction_fetch [18] $end
$var wire 1 A" instruction_fetch [17] $end
$var wire 1 B" instruction_fetch [16] $end
$var wire 1 C" instruction_fetch [15] $end
$var wire 1 D" instruction_fetch [14] $end
$var wire 1 E" instruction_fetch [13] $end
$var wire 1 F" instruction_fetch [12] $end
$var wire 1 G" instruction_fetch [11] $end
$var wire 1 H" instruction_fetch [10] $end
$var wire 1 I" instruction_fetch [9] $end
$var wire 1 J" instruction_fetch [8] $end
$var wire 1 K" instruction_fetch [7] $end
$var wire 1 L" instruction_fetch [6] $end
$var wire 1 M" instruction_fetch [5] $end
$var wire 1 N" instruction_fetch [4] $end
$var wire 1 O" instruction_fetch [3] $end
$var wire 1 P" instruction_fetch [2] $end
$var wire 1 Q" instruction_fetch [1] $end
$var wire 1 R" instruction_fetch [0] $end
$var wire 1 S" instruction_decode [31] $end
$var wire 1 T" instruction_decode [30] $end
$var wire 1 U" instruction_decode [29] $end
$var wire 1 V" instruction_decode [28] $end
$var wire 1 W" instruction_decode [27] $end
$var wire 1 X" instruction_decode [26] $end
$var wire 1 Y" instruction_decode [25] $end
$var wire 1 Z" instruction_decode [24] $end
$var wire 1 [" instruction_decode [23] $end
$var wire 1 \" instruction_decode [22] $end
$var wire 1 ]" instruction_decode [21] $end
$var wire 1 ^" instruction_decode [20] $end
$var wire 1 _" instruction_decode [19] $end
$var wire 1 `" instruction_decode [18] $end
$var wire 1 a" instruction_decode [17] $end
$var wire 1 b" instruction_decode [16] $end
$var wire 1 c" instruction_decode [15] $end
$var wire 1 d" instruction_decode [14] $end
$var wire 1 e" instruction_decode [13] $end
$var wire 1 f" instruction_decode [12] $end
$var wire 1 g" instruction_decode [11] $end
$var wire 1 h" instruction_decode [10] $end
$var wire 1 i" instruction_decode [9] $end
$var wire 1 j" instruction_decode [8] $end
$var wire 1 k" instruction_decode [7] $end
$var wire 1 l" instruction_decode [6] $end
$var wire 1 m" instruction_decode [5] $end
$var wire 1 n" instruction_decode [4] $end
$var wire 1 o" instruction_decode [3] $end
$var wire 1 p" instruction_decode [2] $end
$var wire 1 q" instruction_decode [1] $end
$var wire 1 r" instruction_decode [0] $end
$var wire 1 s" instruction_execute [31] $end
$var wire 1 t" instruction_execute [30] $end
$var wire 1 u" instruction_execute [29] $end
$var wire 1 v" instruction_execute [28] $end
$var wire 1 w" instruction_execute [27] $end
$var wire 1 x" instruction_execute [26] $end
$var wire 1 y" instruction_execute [25] $end
$var wire 1 z" instruction_execute [24] $end
$var wire 1 {" instruction_execute [23] $end
$var wire 1 |" instruction_execute [22] $end
$var wire 1 }" instruction_execute [21] $end
$var wire 1 ~" instruction_execute [20] $end
$var wire 1 !# instruction_execute [19] $end
$var wire 1 "# instruction_execute [18] $end
$var wire 1 ## instruction_execute [17] $end
$var wire 1 $# instruction_execute [16] $end
$var wire 1 %# instruction_execute [15] $end
$var wire 1 &# instruction_execute [14] $end
$var wire 1 '# instruction_execute [13] $end
$var wire 1 (# instruction_execute [12] $end
$var wire 1 )# instruction_execute [11] $end
$var wire 1 *# instruction_execute [10] $end
$var wire 1 +# instruction_execute [9] $end
$var wire 1 ,# instruction_execute [8] $end
$var wire 1 -# instruction_execute [7] $end
$var wire 1 .# instruction_execute [6] $end
$var wire 1 /# instruction_execute [5] $end
$var wire 1 0# instruction_execute [4] $end
$var wire 1 1# instruction_execute [3] $end
$var wire 1 2# instruction_execute [2] $end
$var wire 1 3# instruction_execute [1] $end
$var wire 1 4# instruction_execute [0] $end
$var wire 1 5# memread $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0l
xm
x0!
xP!
xq!
x3"
xS"
xs"
x5#
x?"
xD"
x:"
xG"
xL"
x_"
xd"
xZ"
xg"
xl"
x!#
x&#
xz"
x)#
x.#
xT"
xU"
xV"
xW"
xX"
xY"
x["
x\"
x]"
x^"
x`"
xa"
xb"
xc"
xe"
xf"
xh"
xi"
xj"
xk"
xm"
xn"
xo"
xp"
xq"
xr"
xt"
xu"
xv"
xw"
xx"
xy"
x{"
x|"
x}"
x~"
x"#
x##
x$#
x%#
x'#
x(#
x*#
x+#
x,#
x-#
x/#
x0#
x1#
x2#
x3#
x4#
x4"
x5"
x6"
x7"
x8"
x9"
x;"
x<"
x="
x>"
x@"
xA"
xB"
xC"
xE"
xF"
xH"
xI"
xJ"
xK"
xM"
xN"
xO"
xP"
xQ"
xR"
xr!
xs!
xt!
xu!
xv!
xw!
xx!
xy!
xz!
x{!
x|!
x}!
x~!
x!"
x""
x#"
x$"
x%"
x&"
x'"
x("
x)"
x*"
x+"
x,"
x-"
x."
x/"
x0"
x1"
x2"
x1!
x2!
x3!
x4!
x5!
x6!
x7!
x8!
x9!
x:!
x;!
x<!
x=!
x>!
x?!
x@!
xA!
xB!
xC!
xD!
xE!
xF!
xG!
xH!
xI!
xJ!
xK!
xL!
xM!
xN!
xO!
xQ!
xR!
xS!
xT!
xU!
xV!
xW!
xX!
xY!
xZ!
x[!
x\!
x]!
x^!
x_!
x`!
xa!
xb!
xc!
xd!
xe!
xf!
xg!
xh!
xi!
xj!
xk!
xl!
xm!
xn!
xo!
xp!
xn
xo
xp
xq
xr
xs
xt
xu
xv
xw
xx
xy
xz
x{
x|
x}
x~
x!!
x"!
x#!
x$!
x%!
x&!
x'!
x(!
x)!
x*!
x+!
x,!
x-!
x.!
x/!
x!
x"
x#
x$
x%
x&
x'
x(
x)
x*
x+
x,
x-
x.
x/
x0
x1
x2
x3
x4
x5
x6
x7
x8
x9
x:
x;
x<
x=
x>
x?
x@
xA
xB
xC
xD
xE
xF
xG
xH
xI
xJ
xK
xL
xM
xN
xO
xP
xQ
xR
xS
xT
xU
xV
xW
xX
xY
xZ
x[
x\
x]
x^
x_
x`
xa
xb
xc
xd
xe
xf
xg
xh
xi
xj
xk
$end
#1
0m
